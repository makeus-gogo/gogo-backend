name: Deploying Development Server

on:
  push:
    branches:
      - develop
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout@v2
        uses: actions/checkout@v2

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Create rds secret properties
        env:
          PROFILES: dev
          DB_URI: ${{secrets.JDBC_URI}}
          DB_USERNAME: ${{secrets.DB_USERNAME}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_DRIVER: com.mysql.cj.jdbc.Driver

          RESOURCE_PWD: gogo-domain/src/main/resources
        run: |
          echo -e "spring.profiles=$PROFILES\nspring.datasource.hikari.jdbc-url=$DB_URI\nspring.datasource.hikari.username=$DB_USERNAME\nspring.datasource.hikari.password=$DB_PASSWORD\nspring.datasource.hikari.driver-class-name=$DB_DRIVER" > $RESOURCE_PWD/application-rds.properties

      - name: Get Semantic Versioning
        id: docker-image-version
        run: |
          VERSION=`cat ./version.txt`-${{ github.run_id }}
          echo "::set-output name=version::$VERSION"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GIT_TOKEN }}

      - name: Build, Push image to Github Container Registry
        env:
          DOCKER_REGISTRY: ghcr.io/makeus-gogo
          DOCKER_REPOSITORY: gogo-backend
          IMAGE_TAG: ${{ steps.docker-image-version.outputs.version }}
        run: |
          docker build -t $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG .
          docker tag $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG $DOCKER_REGISTRY/$DOCKER_REPOSITORY:latest
          docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:$IMAGE_TAG
          docker push $DOCKER_REGISTRY/$DOCKER_REPOSITORY:latest
          echo -e "IMAGE=$DOCKER_REGISTRY/$DOCKER_REPOSITORY\nTAG=$IMAGE_TAG" > deploy/.env

      - name: Zip deploy.zip
        run: zip -r deploy.zip deploy

      - name: Upload deploy.zip
        uses: actions/upload-artifact@v2
        with:
          name: deploy.zip
          path: deploy.zip
  deploy:
    needs:
      - build
    runs-on: gogo-api
    steps:
      - name: Download deploy.zip
        uses: actions/download-artifact@v2
        with:
          name: deploy.zip

      - name: run server
        run: |
          unzip -o ./deploy.zip
          cd deploy/
          sh ./run.sh
